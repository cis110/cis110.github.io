I"Æb<h2 id="goals-of-assignment">Goals of Assignment</h2>

<ul>
  <li>Reinforce principles of object oriented design.</li>
  <li>Modularity</li>
  <li>Encapsulation</li>
  <li>Interactions between objects</li>
  <li>State</li>
  <li>Learn to throw and handle exceptions</li>
  <li>Learn to do effective JUnit testing.</li>
</ul>

<h2 id="design">Design</h2>

<p>In this homework, you will be writing the functionality for your favorite local movie theater. All movie theaters have Movies, Customers, and Reviews for their movies, so weâ€™ll be making objects for each of these things.</p>

<h2 id="testing">Testing</h2>

<h3 id="motivation">Motivation</h3>

<p>Weâ€™re now going to extensively test our code. While weâ€™ve been using println statements in main before to test our code, this time weâ€™re going to use JUnit, which is a industry-grade framework used by companies like Amazon and Google to test their Java code. JUnit is so valuable because it lets us maintain enormous test suites that can run automatically and let us know if changes to our code breaks any of our functionality - this becomes super crucial as the projects youâ€™ll be making in your CIS career will grow in size and complexity.</p>

<h3 id="junit-reminders">JUnit Reminders</h3>

<p>As a review, JUnit works by comparing expected output to actual output on your functions and object state. Hereâ€™s an example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleTest</span> <span class="o">{</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSumFunction</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="s">"5 + 6 should be 11"</span><span class="o">,</span> <span class="nc">Example</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">),</span> <span class="mi">11</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p>We sometimes want to do things before every test. We can accomplish this by using the <code class="language-plaintext highlighter-rouge">@Before</code> annotation. Note: This is not a required part of your testing, but if you think it would be helpful, you are more than welcome to use it.
Suppose weâ€™re testing a hypothetical Rainforest class and always to initialize a bunch of trees before each test. We would do this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RainforestTest</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Tree</span><span class="o">[]</span> <span class="n">trees</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Rainforest</span> <span class="n">rainforest</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">trees</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tree</span><span class="o">[]{</span>
            <span class="k">new</span> <span class="nf">Tree</span><span class="o">(</span><span class="s">"Evergreen"</span><span class="o">),</span>
            <span class="k">new</span> <span class="nf">Tree</span><span class="o">(</span><span class="s">"Oak"</span><span class="o">),</span>
            <span class="k">new</span> <span class="nf">Tree</span><span class="o">(</span><span class="s">"Birch"</span><span class="o">),</span>
            <span class="k">new</span> <span class="nf">Tree</span><span class="o">(</span><span class="s">"Acacia"</span><span class="o">)</span>
        <span class="o">};</span>
        <span class="n">rainforest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rainforest</span><span class="o">(</span><span class="n">trees</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testLeafy</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">rainforest</span><span class="o">.</span><span class="na">hasLeafyTrees</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testTall</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">rainforest</span><span class="o">.</span><span class="na">hasTallTrees</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>We can also test to make sure an exception is thrown properly. Using the same setup as above:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="nc">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testException</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">rainforest</span><span class="o">.</span><span class="na">addTree</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>Youâ€™ll find the following functions from the JUnit library useful:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assertTrue</span><span class="o">(</span><span class="n">someConditon</span><span class="o">);</span>
<span class="n">assertFalse</span><span class="o">(</span><span class="n">someCondition</span><span class="o">);</span>
<span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedValue</span><span class="o">,</span> <span class="n">actualValue</span><span class="o">);</span>
<span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedDouble</span><span class="o">,</span> <span class="n">actualDouble</span><span class="o">,</span> <span class="n">deltaValue</span><span class="o">);</span>
<span class="n">assertArrayEquals</span><span class="o">(</span><span class="n">expectedArray</span><span class="o">,</span> <span class="n">actualArray</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="part-1-reviewjava">Part 1: Review.java</h2>

<p>Weâ€™re going to take a bottom-up approach to making this movie theater. First, weâ€™re going to implement the most basic object, which is the Review object. A Review has four properties: a <code class="language-plaintext highlighter-rouge">Movie</code> object, a <code class="language-plaintext highlighter-rouge">isPositive</code> field, a <code class="language-plaintext highlighter-rouge">score</code>, and a <code class="language-plaintext highlighter-rouge">description</code>. Score is an int that must be in the range of <code class="language-plaintext highlighter-rouge">[0, 100]</code> inclusive. This class is what we refer to as a <strong>POJO</strong>, or plain old Java object - it just holds variables and can return their values.</p>

<p>Implement the constructor to store the given values in these fields. Note that there is no <code class="language-plaintext highlighter-rouge">isPositive</code> parameter - you should say that <code class="language-plaintext highlighter-rouge">isPositive</code> is true if the score given is at least <code class="language-plaintext highlighter-rouge">70</code>. Next, implement each of the four getters: <code class="language-plaintext highlighter-rouge">getMovie()</code>, <code class="language-plaintext highlighter-rouge">isPositive()</code>, <code class="language-plaintext highlighter-rouge">getScore()</code>, and <code class="language-plaintext highlighter-rouge">getDescription()</code>.</p>

<h2 id="part-2-reviewtestjava">Part 2: ReviewTest.java</h2>

<p>This is going to be our simplest class to test, because it contains fields but has no methods that change its state or interact with other objects. Complete the two tests we have started for you in <code class="language-plaintext highlighter-rouge">ReviewTest.java</code>. You need to implement the <code class="language-plaintext highlighter-rouge">assert</code> statements in each test.</p>

<h2 id="part-3-moviejava">Part 3: Movie.java</h2>

<p>In <code class="language-plaintext highlighter-rouge">Movie.java</code>, you will be implementing the following methods:</p>

<ul>
  <li>Constructor</li>
  <li>seen()</li>
  <li>leaveReview(Review review)</li>
  <li>rottenTomatoes()</li>
  <li>hasTicketsLeft()</li>
  <li>getters for the fields</li>
</ul>

<p>Letâ€™s break down each part.</p>

<h3 id="constructor">Constructor</h3>

<p>For the constructor, you should be storing the parameters to the instance fields, which are <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">genre</code>, <code class="language-plaintext highlighter-rouge">rating</code>, <code class="language-plaintext highlighter-rouge">timesSeen</code>, <code class="language-plaintext highlighter-rouge">ticketsLeft</code>, <code class="language-plaintext highlighter-rouge">reviews</code>, and <code class="language-plaintext highlighter-rouge">reviewIndex</code>. You will also have to make sure that the movie has a valid <code class="language-plaintext highlighter-rouge">genre</code> - if the provided <code class="language-plaintext highlighter-rouge">genre</code> isnâ€™t in the static array of valid genres, you will throw an <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code> with an appropriate error message.</p>

<p>There are some instance fields that are not provided in the constructor - you should initialize these using your best judgment.</p>

<h3 id="seen"><code class="language-plaintext highlighter-rouge">seen()</code></h3>

<p>Every time a <code class="language-plaintext highlighter-rouge">Customer</code> sees this movie, they will call this function. You should increment <code class="language-plaintext highlighter-rouge">timesSeen</code>, and then decrement <code class="language-plaintext highlighter-rouge">ticketsLeft</code>.</p>

<p><em>Quick check-in: How does this method fit into our concept of â€˜Stateâ€™? How about â€˜Encapsulationâ€™?</em></p>

<h3 id="leavereviewreview-review"><code class="language-plaintext highlighter-rouge">leaveReview(Review review)</code></h3>

<p>Each <code class="language-plaintext highlighter-rouge">Movie</code> object should track the reviews that customers leave for it. if the input is <code class="language-plaintext highlighter-rouge">null</code>, throw an <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code> - otherwise, add the review to your array <code class="language-plaintext highlighter-rouge">reviews</code>. The instance field <code class="language-plaintext highlighter-rouge">reviewIndex</code> will be really useful to you here - you should use that to track where you should put the next review in the array. Note that if there is no space left in your reviews array, you should just return without doing anything.</p>

<h3 id="rottentomatoes">rottenTomatoes()</h3>

<p>Customers donâ€™t want to have to read every review for a movie before deciding if they want to see it. Instead, they should just be able to see the percentage of people that liked it when they saw it! To this end, we will be implementing the Rotten Tomatoes approach - we return the number of positive reviews divided by the number of total reviews left. If there are no reviews yet, just return <code class="language-plaintext highlighter-rouge">0.5</code>.</p>

<h3 id="calculatescore">calculateScore()</h3>

<p>Calculate score is different from rotten tomatoes - rotten tomatoes was the proportion of people that liked the movie. Here we want to be more specific and find the average score of the reviews so that the theater can decide which movies to market on the big sign outside the theater! However, weâ€™re going to tweak the data a little bit to keep our stats accurate - donâ€™t include the lowest score in your calculations; we want to remove the grumpiest customer from our review analysis. For example, if the scores from the reviews are <code class="language-plaintext highlighter-rouge">{50, 75, 75, 90, 8}</code>, we will return <code class="language-plaintext highlighter-rouge">(50 + 75 + 75 + 90) / 4</code> instead of <code class="language-plaintext highlighter-rouge">(50 + 75 + 75 + 90 + 8) / 5</code>.</p>

<h3 id="hasticketsleft">hasTicketsLeft()</h3>

<p>Customers canâ€™t see a movie if itâ€™s sold out. Return <code class="language-plaintext highlighter-rouge">true</code> if there are still tickets for the movie and <code class="language-plaintext highlighter-rouge">false</code> otherwise.</p>

<h3 id="getters">Getters</h3>

<p>You should implement getters for the three private variables <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">genre</code>, and <code class="language-plaintext highlighter-rouge">rating</code>. We have started these for you.</p>

<h2 id="part-4-movietestjava">Part 4: MovieTest.java</h2>

<p>For this file, you should test the following:
Make sure your constructor properly initializes your fields. Use your getter methods to help you test this. You should follow the same logic and structure that you used for your <code class="language-plaintext highlighter-rouge">ReviewTest.java</code> file.</p>

<ul>
  <li>For any function that returns void (<code class="language-plaintext highlighter-rouge">seen()</code> and <code class="language-plaintext highlighter-rouge">leaveReview()</code>), you need to test for <strong>side effects</strong>. That means that you need to make sure that the intended side effects changed your objectâ€™s state properly, and that it did not improperly change any other fields.</li>
  <li>For any function that has a return value, try to test with at least one edge case as well as a â€˜normalâ€™ case. An edge case is an input or state that might be at the limits of acceptable ranges. For example, testing <code class="language-plaintext highlighter-rouge">rottenTomatoes()</code> on a movie with no reviews would be an edge case.</li>
  <li>For any function that can throw an error (in this case, just the constructor), you must write a test that causes that error to be thrown.</li>
</ul>

<h2 id="part-5-customerjava">Part 5: Customer.java</h2>

<p>Weâ€™re now ready to implement our <code class="language-plaintext highlighter-rouge">Customer</code> object. A <code class="language-plaintext highlighter-rouge">Customer</code> has a <code class="language-plaintext highlighter-rouge">name</code> and a minimum Rotten Tomatoes score that a movie has to achieve before theyâ€™ll be willing to see it, which we call <code class="language-plaintext highlighter-rouge">preferredMinScore</code>. A <code class="language-plaintext highlighter-rouge">Customer</code> can also track what movies theyâ€™ve seen using <code class="language-plaintext highlighter-rouge">moviesSeen</code> and what reviews theyâ€™ve left using <code class="language-plaintext highlighter-rouge">reviews</code>. You will be implementing the following methods:</p>

<ul>
  <li>Constructor</li>
  <li><code class="language-plaintext highlighter-rouge">goodEnough(Movie movie)</code></li>
  <li><code class="language-plaintext highlighter-rouge">seeMovie(Movie movie)</code></li>
  <li><code class="language-plaintext highlighter-rouge">leaveReview(Movie movie, int score, String description)</code></li>
  <li>Getters for fields <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">reviews</code>, and <code class="language-plaintext highlighter-rouge">preferredMinScore</code></li>
</ul>

<h3 id="constructor-1">Constructor</h3>

<p>Initialize your instance fields.</p>

<ul>
  <li>When initializing your <code class="language-plaintext highlighter-rouge">reviews</code> and <code class="language-plaintext highlighter-rouge">moviesSeen</code> array, you should make them both of length <code class="language-plaintext highlighter-rouge">100</code>.</li>
  <li>If the name parameter is <code class="language-plaintext highlighter-rouge">null</code> or the empty String, throw an <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code>.</li>
  <li>Note that there are more instance fields than there are parameters in the constructor. Make sure to initialize all of the fields.</li>
</ul>

<h3 id="goodenoughmovie-movie"><code class="language-plaintext highlighter-rouge">goodEnough(Movie movie)</code></h3>

<p>A movie is good enough for a customer to see if the movieâ€™s rotten tomatoes score is at least their preferred minimum score - return <code class="language-plaintext highlighter-rouge">true</code> if the rotten tomatoes score is high enough, otherwise return <code class="language-plaintext highlighter-rouge">false</code>.</p>

<h3 id="seemoviemovie-movie"><code class="language-plaintext highlighter-rouge">seeMovie(Movie movie)</code></h3>

<p>If the input movie is <code class="language-plaintext highlighter-rouge">null</code>, throw an <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code>. Otherwise, do the following:</p>

<ul>
  <li>If <code class="language-plaintext highlighter-rouge">moviesSeenIndex</code> is too large to put a new movie in the array, return <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>If the movie still has tickets left and the customer decides to see the movie, then call the movieâ€™s <code class="language-plaintext highlighter-rouge">seen()</code> method, add the movie to the customerâ€™s array of seen movies, and return <code class="language-plaintext highlighter-rouge">true</code>. Otherwise, return <code class="language-plaintext highlighter-rouge">false</code>.</li>
</ul>

<h3 id="leavereviewmovie-movie-boolean-ispositive-int-score-string-description"><code class="language-plaintext highlighter-rouge">leaveReview(Movie movie, boolean isPositive, int score, String description)</code></h3>

<ul>
  <li>First, make sure the user has not reviewed this movie before (this is not the same thing as seeing the movie!) If they have, then you should throw an <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code>.</li>
  <li>If <code class="language-plaintext highlighter-rouge">reviewIndex</code> is too large to leave another review, return without doing anything. That means that you should not be adding a review to the reviews array and you should not be leaving a review on the movie object.</li>
  <li>If not, then you should leave a review on the movie object with the given parameters, and save the review in the Customerâ€™s array of <code class="language-plaintext highlighter-rouge">reviews</code>.</li>
  <li>You must make sure the review left on the movie object is the same review in the array of reviews - that is, they should share the same reference in memory. You can make sure that they share the same reference by saving the new Review in a variable called <code class="language-plaintext highlighter-rouge">newReview</code>. Then, you can add this <code class="language-plaintext highlighter-rouge">newReview</code> to the customerâ€™s review array and (without modifying <code class="language-plaintext highlighter-rouge">newReview</code>!) also call the Movieâ€™s <code class="language-plaintext highlighter-rouge">leaveReview</code> method with <code class="language-plaintext highlighter-rouge">newReview</code> as the input.</li>
</ul>

<h3 id="getters-1">Getters</h3>

<p>Now implement the three getters we have outlined for you.</p>

<h2 id="part-6-customertestjava">Part 6. CustomerTest.java</h2>

<p>Follow the guidelines from part 4 to write CustomerTest.java. Again, be sure to test the constructor and all methods on both typical inputs and edge cases.</p>

<h2 id="part-7-boxofficejava">Part 7. BoxOffice.java</h2>

<p>We have now finished implementing all of our lower-level objects and are ready to tackle the <code class="language-plaintext highlighter-rouge">BoxOffice</code> class. Running a movie theater is all about marketing, so our <code class="language-plaintext highlighter-rouge">BoxOffice</code> object is going to be in charge of tracking the best movies based on their reviews. First, letâ€™s implement our constructor.</p>

<h3 id="constructor-2">Constructor</h3>

<p>The constructor for a <code class="language-plaintext highlighter-rouge">BoxOffice</code> object should save the theater name and initialize the <code class="language-plaintext highlighter-rouge">bestMovie</code> and <code class="language-plaintext highlighter-rouge">secondBestMovie</code> fields to be <code class="language-plaintext highlighter-rouge">null</code> for now.
We also want to track the total number of movie theaters that are created, so update the static <code class="language-plaintext highlighter-rouge">totalTheaters</code> field as well.</p>

<h3 id="marketingmovie-allmovies"><code class="language-plaintext highlighter-rouge">marketing(Movie[] allMovies)</code></h3>

<p>This is where we will do the work to figure out what movies weâ€™re going to be advertising.</p>

<ul>
  <li>First, make sure that <code class="language-plaintext highlighter-rouge">allMovies</code> isnâ€™t <code class="language-plaintext highlighter-rouge">null</code> and has at least <code class="language-plaintext highlighter-rouge">1</code> movie. If it doesnâ€™t, throw an <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code>.</li>
  <li>Then, find the two movies with the two highest averages based on how we defined our scoring function in the <code class="language-plaintext highlighter-rouge">Movie</code> class (be sure to use functions we already wrote!) and update <code class="language-plaintext highlighter-rouge">bestMovie</code> and <code class="language-plaintext highlighter-rouge">secondBestMovie</code> accordingly.
    <ul>
      <li>Note that if there are ties, you should use the first movie with that score. That is, if the second best movie has a score of 90, and then you find another movie with a score of 90, you wouldnâ€™t change your second best movie.</li>
    </ul>
  </li>
  <li>Note: If <code class="language-plaintext highlighter-rouge">allMovies</code> only has one movie, you should not throw an exception - instead, you should store that value in <code class="language-plaintext highlighter-rouge">bestMovie</code> and <code class="language-plaintext highlighter-rouge">secondBestMovie</code> should be <code class="language-plaintext highlighter-rouge">null</code>.</li>
</ul>

<h3 id="bestnewreleasemovie-allmovies-and-secondbestnewreleasemovie-allmovies"><code class="language-plaintext highlighter-rouge">bestNewRelease(Movie[] allMovies)</code> and <code class="language-plaintext highlighter-rouge">secondBestNewRelease(Movie[] allMovies)</code></h3>

<p>Reviews for movies are always updating, and we donâ€™t want to get out of date on what movies we should be advertising. When someone calls <code class="language-plaintext highlighter-rouge">bestNewRelease</code> or <code class="language-plaintext highlighter-rouge">secondBestNewRelease</code>, you should re-do your marketing calculations on the provided movies. Then, you can return the best or second best movie, respectively.</p>

<h3 id="hasappealingmoviesmovie-allmovies-customer-customer"><code class="language-plaintext highlighter-rouge">hasAppealingMovies(Movie[] allMovies, Customer customer)</code></h3>

<p>We want to be able to show customers if theyâ€™ll like a movie when they get to the theater. Given an input of all the movies and a <code class="language-plaintext highlighter-rouge">customer</code> object, update your marketing and return <code class="language-plaintext highlighter-rouge">true</code> if either the best movie or second best movie are good enough for the customer to watch them. Otherwise, return <code class="language-plaintext highlighter-rouge">false</code>.</p>

<h2 id="part-8-boxofficetestjava">Part 8. BoxOfficeTest.java</h2>

<p>Follow the same guidelines from part 4 to write this file. Again, you will be testing the constructor and all methods, and be sure to use both normal and edge cases.</p>
:ET